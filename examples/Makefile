# MAKEFILE FOR COMPILATION OF DB AND UB EXAMPLES
#
# This makefile provides a build scheme for all C examples provided in the DB and UB directories.
# We assume that every source file represents exactly one example. Two binaries (with the same name
# as the .c source file) will be generated for each source file, suffixed with _gcc and _clang to
# indicate which compiler was used for building.
#
# By default, every build is done with compiler flag -O3, as we are interested in detecting
# incorrect optimizations performed by the compiler for presumed defined behavior examples. 
#
#


# Compiler names
CC_GCC := gcc
CC_CLANG := clang

# Compiler flags
CFLAGS := -O3

# Suffixes of the generated binaries
CLANG_SUFFIX := _clang
GCC_SUFFIX := _gcc

SRC_DIR_DB := ./DB
SRC_DIR_UB := ./UB

BINARIES_DB       := $(patsubst $(SRC_DIR_DB)/%.c, $(SRC_DIR_DB)/%, $(wildcard $(SRC_DIR_DB)/*/*.c))
BINARIES_DB_GCC   := $(addsuffix $(GCC_SUFFIX),$(BINARIES_DB))
BINARIES_DB_CLANG := $(addsuffix $(CLANG_SUFFIX),$(BINARIES_DB))

BINARIES_UB       := $(patsubst $(SRC_DIR_UB)/%.c, $(SRC_DIR_UB)/%, $(wildcard $(SRC_DIR_UB)/*/*.c))
BINARIES_UB_GCC   := $(addsuffix $(GCC_SUFFIX),$(BINARIES_UB))
BINARIES_UB_CLANG := $(addsuffix $(CLANG_SUFFIX),$(BINARIES_UB))

all: config.h $(BINARIES_DB_GCC) $(BINARIES_DB_CLANG) $(BINARIES_UB_GCC) $(BINARIES_UB_CLANG)

# Generation of a config header file to differentiate between
# interpreter and compiler runs: the interpreter does not provide
# a standard library interpretation, but has relevant constructs
# build into the language instead.
config.h:
	@echo "// AUTO GENERATED BY MAKEFILE"                  						> config.h
	@echo ""                                              						>> config.h
	@echo "#if defined (__clang__) || defined (__GNUC__) || defined (__KCC__)" 	>> config.h
	@echo "#define WITH_STD"                              						>> config.h
	@echo "#endif"                                        						>> config.h

# [GCC] Defined behavior example binaries
$(SRC_DIR_DB)/%$(GCC_SUFFIX): $(SRC_DIR_DB)/%.c
	$(CC_GCC) $(CFLAGS) $< -o $@

# [CLANG] defined behavior example binaries
$(SRC_DIR_DB)/%$(CLANG_SUFFIX): $(SRC_DIR_DB)/%.c
	$(CC_CLANG) $(CFLAGS) $< -o $@

# [GCC] Undefined behavior example binaries
$(SRC_DIR_UB)/%$(GCC_SUFFIX): $(SRC_DIR_UB)/%.c
	$(CC_GCC) $(CFLAGS) $< -o $@

# [CLANG] Undefined behavior example binaries
$(SRC_DIR_UB)/%$(CLANG_SUFFIX): $(SRC_DIR_UB)/%.c
	$(CC_CLANG) $(CFLAGS) $< -o $@

clean:
	$(RM) config.h $(BINARIES_DB_GCC) $(BINARIES_DB_CLANG) $(BINARIES_UB_GCC) $(BINARIES_UB_CLANG)

.PHONY: clean
